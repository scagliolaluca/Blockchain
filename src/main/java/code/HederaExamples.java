package code;

import com.hedera.hashgraph.sdk.*;
import io.github.cdimascio.dotenv.Dotenv;

import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeoutException;

public class HederaExamples {

    public static void main(String[] args) throws PrecheckStatusException, TimeoutException, ReceiptStatusException {

        //Grab your Hedera Testnet account ID and private key
        AccountId myAccountId = AccountId.fromString(Dotenv.load().get("MY_ACCOUNT_ID"));
        PrivateKey myPrivateKey = PrivateKey.fromString(Dotenv.load().get("MY_PRIVATE_KEY"));

        System.out.println(myAccountId);

        //Create your Hedera Testnet client
        Client client = Client.forTestnet();
        //Set your account as the client's operator
        client.setOperator(myAccountId, myPrivateKey);
        //Set the default maximum transaction fee (in Hbar)
        client.setDefaultMaxTransactionFee(new Hbar(100));
        //Set the maximum payment for queries (in Hbar)
        client.setMaxQueryPayment(new Hbar(50));

        String object = "60806040526040518060400160405280600b81526020017f48656c6c6f20576f726c640000000000000000000000000000000000000000008152505f9081620000499190620002c1565b5034801562000056575f80fd5b50620003a5565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680620000d957607f821691505b602082108103620000ef57620000ee62000094565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620001537fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000116565b6200015f868362000116565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620001a9620001a36200019d8462000177565b62000180565b62000177565b9050919050565b5f819050919050565b620001c48362000189565b620001dc620001d382620001b0565b84845462000122565b825550505050565b5f90565b620001f2620001e4565b620001ff818484620001b9565b505050565b5b8181101562000226576200021a5f82620001e8565b60018101905062000205565b5050565b601f82111562000275576200023f81620000f5565b6200024a8462000107565b810160208510156200025a578190505b62000272620002698562000107565b83018262000204565b50505b505050565b5f82821c905092915050565b5f620002975f19846008026200027a565b1980831691505092915050565b5f620002b1838362000286565b9150826002028217905092915050565b620002cc826200005d565b67ffffffffffffffff811115620002e857620002e762000067565b5b620002f48254620000c1565b620003018282856200022a565b5f60209050601f83116001811462000337575f841562000322578287015190505b6200032e8582620002a4565b8655506200039d565b601f1984166200034786620000f5565b5f5b82811015620003705784890151825560018201915060208501945060208101905062000349565b868310156200039057848901516200038c601f89168262000286565b8355505b6001600288020188555050505b505050505050565b61070880620003b35f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c80634176756e14610038578063cfae321714610068575b5f80fd5b610052600480360381019061004d919061019c565b610086565b60405161005f91906101d6565b60405180910390f35b6100706100c5565b60405161007d9190610279565b60405180910390f35b5f8060405160200161009891906103b8565b6040516020818303038152906040525f90816100b49190610595565b506100be82610150565b9050919050565b5f80546100d1906102c6565b80601f01602080910402602001604051908101604052809291908181526020018280546100fd906102c6565b80156101485780601f1061011f57610100808354040283529160200191610148565b820191905f5260205f20905b81548152906001019060200180831161012b57829003601f168201915b505050505081565b5f60028261015e9190610691565b9050919050565b5f80fd5b5f819050919050565b61017b81610169565b8114610185575f80fd5b50565b5f8135905061019681610172565b92915050565b5f602082840312156101b1576101b0610165565b5b5f6101be84828501610188565b91505092915050565b6101d081610169565b82525050565b5f6020820190506101e95f8301846101c7565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561022657808201518184015260208101905061020b565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61024b826101ef565b61025581856101f9565b9350610265818560208601610209565b61026e81610231565b840191505092915050565b5f6020820190508181035f8301526102918184610241565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806102dd57607f821691505b6020821081036102f0576102ef610299565b5b50919050565b5f81905092915050565b5f819050815f5260205f209050919050565b5f815461031e816102c6565b61032881866102f6565b9450600182165f8114610342576001811461035757610389565b60ff1983168652811515820286019350610389565b61036085610300565b5f5b8381101561038157815481890152600182019150602081019050610362565b838801955050505b50505092915050565b7f5800000000000000000000000000000000000000000000000000000000000000815250565b5f6103c38284610312565b91506103ce82610392565b60018201915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026104547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610419565b61045e8683610419565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61049961049461048f84610169565b610476565b610169565b9050919050565b5f819050919050565b6104b28361047f565b6104c66104be826104a0565b848454610425565b825550505050565b5f90565b6104da6104ce565b6104e58184846104a9565b505050565b5b81811015610508576104fd5f826104d2565b6001810190506104eb565b5050565b601f82111561054d5761051e81610300565b6105278461040a565b81016020851015610536578190505b61054a6105428561040a565b8301826104ea565b50505b505050565b5f82821c905092915050565b5f61056d5f1984600802610552565b1980831691505092915050565b5f610585838361055e565b9150826002028217905092915050565b61059e826101ef565b67ffffffffffffffff8111156105b7576105b66103dd565b5b6105c182546102c6565b6105cc82828561050c565b5f60209050601f8311600181146105fd575f84156105eb578287015190505b6105f5858261057a565b86555061065c565b601f19841661060b86610300565b5f5b828110156106325784890151825560018201915060208501945060208101905061060d565b8683101561064f578489015161064b601f89168261055e565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61069b82610169565b91506106a683610169565b92508282026106b481610169565b915082820484148315176106cb576106ca610664565b5b509291505056fea26469706673582212205c9eef1a414ea1e7f0018d9744aeb87beebd4a831c7c11d4804b3e121127669d64736f6c63430008170033";
        byte[] bytecode = object.getBytes(StandardCharsets.UTF_8);

        //Create a file on Hedera and store the hex-encoded bytecode
        FileCreateTransaction fileCreateTx = new FileCreateTransaction()
                //Set the bytecode of the contract
                .setContents(bytecode);

        //Submit the file to the Hedera test network signing with the transaction fee payer key specified with the client
        TransactionResponse submitTx = fileCreateTx.execute(client);

        //Get the receipt of the file create transaction
        TransactionReceipt fileReceipt = submitTx.getReceipt(client);

        //Get the file ID from the receipt
        FileId bytecodeFileId = fileReceipt.fileId;

        //Log the file ID
        System.out.println("The smart contract bytecode file ID is " + bytecodeFileId);

//v2 Hedera Java SDK

    }


}

